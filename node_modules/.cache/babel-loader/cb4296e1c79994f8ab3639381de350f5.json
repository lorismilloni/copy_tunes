{"ast":null,"code":"var _jsxFileName = \"/home/lorismilloni/Repos/copy_tunes/src/pages/Album.jsx\";\n\n/* eslint-disable indent */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport Loading from '../components/Loading';\nimport { addSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Album extends React.Component {\n  constructor() {\n    super();\n\n    this.handleFavorite = async song => {\n      const {\n        favoriteSongs\n      } = this.state;\n      this.setState({\n        loading: true\n      });\n      await addSong(song);\n      this.setState({\n        loading: false,\n        favoriteSongs: [...favoriteSongs, song.trackId]\n      });\n    };\n\n    this.state = {\n      artistName: '',\n      collectionName: '',\n      tracks: [],\n      loading: false,\n      favoriteSongs: []\n    };\n  }\n\n  async componentDidMount() {\n    // ao montar o componente, busca as músicas do album selecionado\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props; // realiza uma desestruturação das props, é o mesmo que: `this.props.match.params.id`\n\n    const tracks = await getMusics(id); // atribui para a const tracks todas as músicas retornadas da função getMusic\n    // a prop match é enviada quando é gerada uma página dinamicamente, através do :id no path\n\n    const favoritesArray = await getFavoriteSongs();\n    const {\n      artistName,\n      collectionName\n    } = tracks[0]; // desestrutura as chaves presentes no primeiro item do array\n\n    this.setState({\n      artistName,\n      collectionName,\n      tracks: tracks.slice(1),\n      favoriteSongs: favoritesArray.map(song => song.trackId) // aqui o map é utilizado para salvar apenas o trackId das músicas no array de favoritos\n\n    }); // aqui é utilizado o método slice(1) para pegar somente a partir do índice 1, excluindo o primeiro objeto do array porque ele não é referente a uma música, mas às informações do álbum.\n  }\n\n  render() {\n    const {\n      artistName,\n      collectionName,\n      tracks,\n      loading,\n      favoriteSongs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n          class: \"columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              \"data-testid\": \"artist-name\",\n              children: artistName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              \"data-testid\": \"album-name\",\n              children: collectionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              children: tracks.map(track => /*#__PURE__*/_jsxDEV(MusicCard, {\n                handleFavorite: () => this.handleFavorite(track),\n                favoriteSongs: favoriteSongs,\n                ...track\n              }, track.trackId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 46\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n} // requisito 7, 8, 9 e 10 feito com base do PR do Leonardo Vogel\n\nAlbum.propTypes = {\n  id: PropTypes.number\n}.isRequired;","map":{"version":3,"sources":["/home/lorismilloni/Repos/copy_tunes/src/pages/Album.jsx"],"names":["React","PropTypes","Header","getMusics","MusicCard","Loading","addSong","getFavoriteSongs","Album","Component","constructor","handleFavorite","song","favoriteSongs","state","setState","loading","trackId","artistName","collectionName","tracks","componentDidMount","match","params","id","props","favoritesArray","slice","map","render","track","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport Loading from '../components/Loading';\nimport { addSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nexport default class Album extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      artistName: '',\n      collectionName: '',\n      tracks: [],\n      loading: false,\n      favoriteSongs: [],\n    };\n  }\n\n  async componentDidMount() {\n    // ao montar o componente, busca as músicas do album selecionado\n    const { match: { params: { id } } } = this.props;\n    // realiza uma desestruturação das props, é o mesmo que: `this.props.match.params.id`\n    const tracks = await getMusics(id);\n    // atribui para a const tracks todas as músicas retornadas da função getMusic\n    // a prop match é enviada quando é gerada uma página dinamicamente, através do :id no path\n    const favoritesArray = await getFavoriteSongs();\n    const { artistName, collectionName } = tracks[0];\n    // desestrutura as chaves presentes no primeiro item do array\n    this.setState({\n      artistName,\n      collectionName,\n      tracks: tracks.slice(1),\n      favoriteSongs: favoritesArray.map((song) => song.trackId),\n      // aqui o map é utilizado para salvar apenas o trackId das músicas no array de favoritos\n    });\n\n    // aqui é utilizado o método slice(1) para pegar somente a partir do índice 1, excluindo o primeiro objeto do array porque ele não é referente a uma música, mas às informações do álbum.\n  }\n\n  handleFavorite = async (song) => {\n    const { favoriteSongs } = this.state;\n    this.setState({ loading: true });\n    await addSong(song);\n    this.setState({\n      loading: false,\n      favoriteSongs: [...favoriteSongs, song.trackId],\n    });\n  }\n\n  render() {\n    const {\n      artistName,\n      collectionName,\n      tracks,\n      loading,\n      favoriteSongs,\n    } = this.state;\n\n    return (\n      <section data-testid=\"page-album\">\n        <Header />\n        <main>\n          { (loading) ? <Loading />\n            : (\n              <section class=\"columns\">\n                <div class=\"column\"></div>\n                <div class=\"column\">\n                  <h4 data-testid=\"artist-name\">{artistName}</h4>\n                  <h5 data-testid=\"album-name\">{collectionName}</h5>\n                  <section>\n                    { tracks.map((track) => (<MusicCard\n                      key={ track.trackId }\n                      handleFavorite={ () => this.handleFavorite(track) }\n                      favoriteSongs={ favoriteSongs }\n                      { ...track }\n                    />)) }\n                    {/* o map aqui é usado para renderizar todas as músicas do array tracks, chamando o componente MusicCard e passando como prop todo o objeto da música, com um spread operator */}\n                  </section>\n                </div>\n                <div class=\"column\"></div>\n              </section>\n            )}\n        </main>\n      </section>\n    );\n  }\n}\n\n// requisito 7, 8, 9 e 10 feito com base do PR do Leonardo Vogel\n\nAlbum.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n"]},"metadata":{},"sourceType":"module"}